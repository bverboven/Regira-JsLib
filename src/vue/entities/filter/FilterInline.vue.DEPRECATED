<template>
    <div class="row">
        <div class="col-auto">
            <div class="input-group">
                <IconButton icon="clear" class="btn-outline-secondary" @click="handleReset" />
                <input v-model.lazy.trim="searchObject.q" class="form-control" :style="{ width: $screen.layout == 'xs' ? '10rem' : undefined }" placeholder="keyword(s)" @change="handleUpdate" />
                <IconButton icon="search" class="btn-outline-primary" @click="handleUpdate" />
                <IconButton v-if="showToggleAdv" icon="filter" class="btn-outline-info" @click="handleToggle" />
            </div>
            <small class="italic-muted">Filters are applied</small>
        </div>
    </div>
</template>

<script setup lang="ts">
import useFilter, { type FilterEmits, filterDefaults } from "./filter"
import type { ISearchObject } from "../abstractions/ISearchObject"
import { useVModelField } from "@/vue_modules/vue-helper"

interface Emits extends /* @vue-ignore */ FilterEmits {}
// can't use imported FilterProps interface yet...

const emit = defineEmits<Emits>()
const props = withDefaults(
    defineProps<{
        modelValue: ISearchObject
        resultCount?: number | null
        showToggleAdv?: boolean
    }>(),
    {
        ...filterDefaults,
    }
)
const searchObject = useVModelField<ISearchObject>(props, emit)

const { handleReset, handleUpdate, handleToggle } = useFilter({ searchObject, emit })
</script>
